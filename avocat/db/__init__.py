import avocat.act as act
from collections import defaultdict
import avocat.db.api as api

def find_sol(out, err, argv):
    """ find a solution tree for the given stderr/stdout """
    print(extract_codes(
        api.getAnswers(api.querySO("", tags=[argv[0]] if len(argv) > 0 else []))
    ))
    #act.Choice(Q="which looks right?", choices=["abc", "xyz"])
    #return act.Tree()

def extract_codes(questions):
    """
    Get code snippets from a list of questions's answers.
    """
    code = []
    for q in questions.values():
        for a in q.answers:
            code += a.code
    
    return code

def codes_to_tree(codes):
    """
    Convert a list of codes to a tree of choices.
    """
    return [act.Shell(
        *[act.Const(w) for w in c.split()]
    ) for c in codes]

database = defaultdict(
    lambda: act.Shell(act.Const(data="echo"), act.Const(data="autogenerated")),
    {
        "Assertion Error! Cats are bad programmers.\n":
            act.Shell(
                act.Const(data="echo"), 
                act.Const(data="cats are indeed bad programmers"), 
            ),
        "ls: cannot access 'thisdoesnotexist': No such file or directory\n":
            act.Shell(
                act.Const(data="echo"), 
                act.Const(data="you are an idiot"), 
            )
    }
)